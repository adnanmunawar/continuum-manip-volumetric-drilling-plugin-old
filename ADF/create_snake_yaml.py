


def write_ambf_header(lines):
    lines.append("# AMBF Version: (0.1)")
    lines.append("# Generated By: ambf_addon for Blender (2.9.0)")
    lines.append("# Link: https://github.com/WPI-AIM/ambf_addon")
    lines.append("# Generated on: 2022-02-23 11:20:04")
    return lines

def define_bodies_joints(lines, bodies, joints):
    lines.append("bodies:")
    for body in bodies:
        lines.append("- BODY " + body)
    lines.append("joints:")
    for joint in joints:
        lines.append("- JOINT " + joint)
    return lines

def set_global_params(lines):
    lines.append("high resolution path: meshes/bigss_snake_centered/high_res/")
    lines.append("low resolution path: meshes/bigss_snake_centered/low_res/")
    lines.append("ignore inter-collision: true")
    lines.append("namespace: /ambf/env/")
    return lines

def add_segment_base(lines, body):
    lines.append("BODY snake_stick:")
    lines.append("  name: snake_stick")
    lines.append("  mesh: snake_stick.STL")
    lines.append("  collision mesh type: CONVEX_HULL")
    lines.append("  mass: 0.0")
    lines.append("  inertia:")
    lines.append("    ix: 0.0")
    lines.append("    iy: 0.0")
    lines.append("    iz: 0.0")
    lines.append("  collision margin: 0.001")
    lines.append("  scale: 1.0")
    lines.append("  location:")
    lines.append("    position:")
    lines.append("      x: -13.0")
    lines.append("      y: 0.5")
    lines.append("      z: 0.0")
    lines.append("    orientation:")
    lines.append("      r: 0.0")
    lines.append("      p: -0.0")
    lines.append("      y: 1.57")
    lines.append("  inertial offset:")
    lines.append("    position:")
    lines.append("      x: 0.0003085081")
    lines.append("      y: 0.1816485822")
    lines.append("      z: 0.0002999995")
    lines.append("    orientation:")
    lines.append("      r: 0")
    lines.append("      p: 0")
    lines.append("      y: 0")
    lines.append("  passive: false")
    lines.append("  color: random")
    lines.append("  publish children names: false")
    lines.append("  publish joint names: false")
    lines.append("  publish joint positions: false")
    lines.append("  friction:")
    lines.append("    rolling: 0.0")
    lines.append("    static: 0.5")
    lines.append("  restitution: 0.1000000015")
    lines.append("  damping:")
    lines.append("    angular: 0.1000000015")
    lines.append("    linear: 0.0399999991")
    lines.append("  visible: true")
    lines.append("  collision groups: []")
    return lines

def add_segment_bodies(lines, seg_bodies, mass, y_locs):
    # probably shouldn't change mass w/o changing inertia
    for body, y_loc in zip(seg_bodies, y_locs):
        lines.append("BODY " + body + ":")
        lines.append("  name: " + body)
        lines.append("  mesh: " + body + ".STL")
        lines.append("  collision mesh type: CONCAVE_MESH")
        lines.append("  mass: " + str(mass))
        lines.append("  inertia:")
        lines.append("    ix: 5.3578e-06")
        lines.append("    iy: 8.6755e-06")
        lines.append("    iz: 5.9158e-06")
        lines.append("  collision margin: 0.001")
        lines.append("  scale: 1.0")
        lines.append("  location:")
        lines.append("    position:")
        lines.append("      x: 0.0")
        lines.append("      y: " + str(y_loc))
        lines.append("      z: 0.0")
        lines.append("    orientation:")
        lines.append("      r: 0.0")
        lines.append("      p: -0.0")
        lines.append("      y: 0.0")
        lines.append("  inertial offset:")
        lines.append("    position:")
        lines.append("      x: -0.0146952067")
        lines.append("      y: 0.0046030609")
        lines.append("      z: 0.0003000004")
        lines.append("    orientation:")
        lines.append("      r: 0")
        lines.append("      p: 0")
        lines.append("      y: 0")
        lines.append("  passive: false")
        lines.append("  color: random")
        lines.append("  publish children names: false")
        lines.append("  publish joint names: false")
        lines.append("  publish joint positions: false")
        lines.append("  friction:")
        lines.append("    rolling: 0.3")
        lines.append("    static: 0.5")
        lines.append("  restitution: 0.1000000015")
        lines.append("  damping:")
        lines.append("    angular: 0.9")
        lines.append("    linear: 0.9")
        lines.append("  visible: true")
        lines.append("  collision groups: []")
    return lines

def add_joints(lines, bodies, joints, parent_pivots, stiffs, damps, hlimits, llimits):

    for i, (joint, y_piv, stiff, damp, hlim, llim) in enumerate(zip(joints, parent_pivots, stiffs, damps, hlimits, llimits)):
        lines.append("JOINT " + joint+ ":")
        lines.append("  name: " + joint)
        lines.append("  parent: BODY " + bodies[i])
        lines.append("  child: BODY " + bodies[i+1])
        lines.append("  parent axis:")
        lines.append("    x: 0.0")
        lines.append("    y: 0.0")
        lines.append("    z: 1.0")
        lines.append("  parent pivot:")
        lines.append("    x: 0.0")
        lines.append("    y: " + str(y_piv))
        lines.append("    z: 0.0")
        lines.append("  child axis:")
        lines.append("    x: 0.0")
        lines.append("    y: 0.0")
        lines.append("    z: 1.0")
        lines.append("  child pivot:")
        lines.append("    x: 0.0")
        lines.append("    y: 0.0")
        lines.append("    z: 0.0")
        lines.append("  joint limits:")
        lines.append("    high: " + str(hlim))
        lines.append("    low: " + str(llim))
        lines.append("  enable feedback: false")
        lines.append("  passive: true")
        lines.append("  controller output type: POSITION")
        lines.append("  type: angular spring")
        lines.append("  max motor impulse: 10.0")
        lines.append("  stiffness: " + str(stiff))
        lines.append("  equilibrium point: 0.0")
        lines.append("  damping: " + str(damp))
    return lines

def main():
    num_segs = 27
    bodies = ["snake_stick"]
    joints = []
    for i in range(27):
        bodies.append("seg"+str(i+1))
        joints.append("joint"+str(i+1))

    # From the CAD
    y_locs = [36.02972, 37.35460, 38.66981, 39.97534, 41.27119,42.55736, 43.83386, 45.10068, 46.35782, 47.60529,48.84308,50.07119,51.28962,52.49838,53.69746,54.88686,56.06659,57.23664,58.39701,59.54771,60.68872,61.82167,62.95139,64.08112,65.21084, 66.34056, 67.47028]
    y_locs = [y/100.0 for y in y_locs] # scaled for AMBF to 10x real size (measurements in meters)

    stiffs = [10.0*pow(num_segs-x+1,2) for x in range(num_segs)]



    damps = [1.0]*num_segs
    # damps = [10000000000.0] * num_segs
    # hlimits = [0.2618000037] * num_segs
    # llimits = [-0.2618000037] * num_segs
    hlimits = [0.0872665] * num_segs
    llimits = [-0.0872665] * num_segs
    mass = 0.01

    parent_pivot = [y_locs[0]] # distance to first segment
    for i in range(len(y_locs)-1):
        parent_pivot.append( (y_locs[i+1]-y_locs[i]))

    lines = []
    lines = write_ambf_header(lines)
    lines = define_bodies_joints(lines, bodies, joints)
    lines = set_global_params(lines)
    lines = add_segment_base(lines, bodies[0])
    lines = add_segment_bodies(lines, bodies[1:], mass, y_locs) # skip the first one (the snake base)
    lines = add_joints(lines, bodies, joints, parent_pivot, stiffs, damps, hlimits, llimits)

    with open('bigss_snake_centered.yaml', 'w') as f:
        f.write('\n'.join(lines))
        f.close()

if __name__ == "__main__":
    main()